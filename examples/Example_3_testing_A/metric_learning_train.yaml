# CommonFramework configuration
stage: graph_construction
model: MetricLearning
input_dir: /global/cfs/cdirs/m3443/data/GNN4ITK/CommonFrameworkExamples/Example_3_Dev_A/feature_store/ # Should contain the files used in training and inference
stage_dir: /global/cfs/cdirs/m3443/data/GNN4ITK/CommonFrameworkExamples/Example_3_Dev_A/metric_learning/ # A directory to be created that will store logs, artifacts, and output data
project: CF_Example_3_MetricLearning # Used in logging
gpus: 1
nodes: 1

# Dataset parameters
data_split: [80, 10, 10] # Number of [training, validation, testing] examples

# Truth and weighting parameters. The syntax is as follows:
  # Single value: track[key] == value
  # List of 2 floats: value1 <= track[key] <= value2
  # List with a string as the first value: First value defines the boolean test, the second value is a list or value. Boolean tests are: (in, not_in, is, is_not, within, not_within)
  # All other tracks follow the default: If a true edge, weight=0. If a fake edge, weight=1.
weighting:
  - weight: 1.
    conditions: 
      y: False
  - weight: 0.
    conditions:
      y: True
  - weight: 2.
    conditions:
      y: True
      pt: [1., .inf]
      nhits: [3., .inf]

# A list of hard cut conditions. Any hits not passing these conditions will be removed from the training and validation dataset.
# By definition, noise will not pass any of these cuts, so any hard cuts will remove noise.
hard_cuts:
  pt: [1., .inf]

# Model parameters
undirected: True
node_features: [r, phi, z, cell_count, cell_val, leta, lphi, lx, ly, lz, geta, gphi]
emb_hidden: 1024
nb_layer: 4
emb_dim: 12
activation: Tanh
randomisation: 1
points_per_batch: 100000
r_train: 0.1
knn: 100
knn_val: 1000

# Training parameters
warmup: 5
margin: 0.1
lr: 0.01
factor: 0.7
patience: 10
max_epochs: 50
metric_to_monitor: f1
metric_mode: max